#ifndef RADIO_DOGE_TYPES
#define RADIO_DOGE_TYPES

#pragma once
enum serialCommand 
{
	NONE,
	NODE_ADDRESS_GET,
	NODE_ADDRESS_SET,
	PING_REQUEST,
	MESSAGE_REQUEST,
	HARDWARE_INFO = 63, //0x3f = '?'
	BROADCAST_MESSAGE = 98, // 0x62 = 'b'
	DISPLAY_CONTROL = 100, // 0x64 = 'd'
	HOST_FORMED_PACKET = 104, //0x68 = 'h'
	MULTIPART_PACKET = 109, // 0x6D = 'm'
	RESULT_CODE=254 //0xFE
};

enum displayType
{
	CUSTOM_DISPLAY,
	RADIO_DOGE_LOGO,
	DOGE_ANIMATION,
	COIN_ANIMATION
};

enum broadcastType
{
	HUB_ANNOUNCEMENT,
	NODE_ANNOUNCEMENT,
};

enum resultCode 
{
	RESULT_ACK=6, // 0x06 = 'ACK'
	RESULT_NACK=21 // 0x15 = 'NAK'
};

enum dogeCommand
{
	DISPLAY_QR = 1,
	REGISTRATION = 15,
	GET_DOGE_ADDRESS = 120,
	SEND_DOGE_ADDRESS = 240,
	REQUEST_UTXOS = 111,
	UTXOS_RECEIVED = 112,
	REQUEST_BALANCE = 101,
	BALANCE_RECEIVED = 202,
	DOGE_COMMAND_SUCCESS = 1,
	DOGE_COMMAND_FAILURE = 254,
	TRANSACTION_REQUEST = 170,
	TRANSACTION_RESULT = 171,
};

enum dogeResponseCode
{
	HUB_RESPONSE_SUCCESS,
	INVALID_ADDRESS,
	ALREADY_REGISTERED,
	NOT_REGISTERED,
	INVALID_PIN,
	NO_STORED_UTXOS,
	WATCHLIST_FAILURE,
};

enum registrationFunctions
{
	ADD_REGISTRATION = 10,
	REMOVE_REGISTRATION = 20,
	UPDATE_PIN = 30
};

struct nodeAddress {
	uint8_t region;
	uint8_t community;
	uint8_t node;
};

#endif